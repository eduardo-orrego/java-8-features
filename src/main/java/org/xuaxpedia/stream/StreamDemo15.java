package org.xuaxpedia.stream;

import java.util.Objects;
import java.util.Random;
import java.util.stream.Stream;

public class StreamDemo15 {
  public static void main(String[] args) {

    System.out.println("Empty operation");
    // Stream.empty() operation: Create an empty stream.
    Stream<String> emptyStream = Stream.empty();
    emptyStream.forEach(System.out::println);

    System.out.println("of operation");
    // Operation Stream.of(T... values): Creates a stream from individual values.
    Stream<Integer> valuesStream = Stream.of(1, 2, 3, 4, 5);
    valuesStream.map(Object::toString).forEach(System.out::println);

    System.out.println("generate operation");
    // Stream.generate(Supplier<T> s) operation:
    // Creates a stream whose elements are generated by the provided provider.
    Stream<Integer> randomNumbersStream = Stream.generate(() -> new Random().nextInt(100));
    randomNumbersStream.limit(5).map(Object::toString).forEach(System.out::println);

    System.out.println("iterate operation");
    // Operation Stream.iterate(T seed, UnaryOperator<T> f):
    // Creates a stream whose elements are generated by repeated applications of the given function
    // starting from a seed value.
    Stream<Integer> iterateStream = Stream.iterate(1, n -> n * 2).limit(5);
    iterateStream.map(Objects::toString).forEach(System.out::println);
  }
}

